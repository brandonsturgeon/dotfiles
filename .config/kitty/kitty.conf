# vim:fileencoding=utf-8:ft=conf

# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants. By default they are derived automatically,
# by the OSes font system. Setting them manually is useful for font families
# that have many weight variants like Book, Medium, Thick, etc. For example:
# font_family Operator Mono Book
# bold_font Operator Mono Thick
# bold_italic_font Operator Mono Medium
font_family      FuraCodeNerdFontComplete-Retina
italic_font      auto
bold_font        auto
bold_italic_font auto

# Font size (in pts)
font_size        18.0

# The amount the font size is changed by (in pts) when increasing/decreasing
# the font size in a running terminal.
font_size_delta 2

# The foreground color
#foreground       #9cc2c3
foreground        #aacccd

# The background color
#background       #001e27
background       #002833

# The foreground for selections
#selection_foreground #93a1a1
selection_foreground #8ca09f

# The background for selections
#selection_background #073642
selection_background #00475a

# The cursor color
#cursor           #ffffff
cursor           #f86100

# The cursor opacity
cursor_opacity   0.7

# The cursor shape can be one of (block, beam, underline)
cursor_shape     block

# The interval (in seconds) at which to blink the cursor. Set to zero to
# disable blinking.
cursor_blink_interval     0.5

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero to never stop blinking.
cursor_stop_blinking_after 15.0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 10000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
scrollback_pager less +G -R

# When viewing scrollback in a new window, put it in a new tab as well
scrollback_in_new_tab no

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
wheel_scroll_multiplier 5.0

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
mouse_hide_wait 3.0

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
enabled_layouts *

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   640
initial_window_height  400

# Delay (in milliseconds) between screen updates. Decreasing it, increases fps
# at the cost of more CPU usage. The default value yields ~100fps which is more
# that sufficient for most uses.
repaint_delay    10

# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell yes

# The modifier keys to press when clicking with the mouse on URLs to open the URL
open_url_modifiers ctrl+shift

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# Choose whether to use the system implementation of wcwidth() (used to
# control how many cells a character is rendered in).  If you use the system
# implementation, then kitty and any programs running in it will agree. The
# problem is that system implementations often are based on outdated unicode
# standards and get the width of many characters, such as emoji, wrong. So if
# you are using kitty with programs that have their own up-to-date wcwidth()
# implementation, set this option to no.
use_system_wcwidth yes

# The value of the TERM environment variable to set
#term xterm-kitty
term xterm-256color

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
window_border_width 1

# The window margin (in pts) (blank area outside the border)
window_margin_width 0

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 0

# The color for the border of the active window
active_border_color #00ff00

# The color for the border of inactive windows
inactive_border_color #cccccc

# Tab-bar colors
active_tab_foreground #000
active_tab_background #eee
inactive_tab_foreground #444
inactive_tab_background #999


# The 16 terminal colors. There are 8 basic colors, each color has a dull and
# bright version.

# black
#color0  #002831
#color8  #006488
color0   #003440
color8   #00779a

# red
#color1  #d11c24
#color9  #f5163b
color1   #dc312e
color9   #f9314b

# green
#color2  #6cbe6c
#color10 #51ef84
color2   #7cc67f
color10  #5bee96

# yellow
#color3  #a57706
#color11 #b27e28
color3   #b58900
color11  #c08f34

# blue
#color4  #2176c7
#color12 #178ec8
color4   #268ad2
color12  #109fd2

# magenta
#color5  #c61c6f
#color13 #e24d8e
color5   #d33582
color13  #e9679f

# cyan
#color6  #259286
#color14 #00b39e
color6   #2aa197
color14  #00bdae

# white
#color7  #eae3cb
#color15 #fcf4dc
color7   #eee8d5
color15  #fdf6e3

# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

# Clipboard
map cmd+shift+v        paste_from_clipboard
map cmd+shift+s        paste_from_selection
map cmd+shift+c        copy_to_clipboard
map shift+insert        paste_from_selection

# Scrolling
map cmd+shift+up        scroll_line_up
map cmd+shift+down      scroll_line_down
map cmd+shift+k         scroll_line_up
map cmd+shift+j         scroll_line_down
map cmd+shift+page_up   scroll_page_up
map cmd+shift+page_down scroll_page_down
map cmd+shift+home      scroll_home
map cmd+shift+end       scroll_end
map cmd+shift+h         show_scrollback


# Tab management
map cmd+shift+]    next_tab
map cmd+shift+[     previous_tab
map cmd+shift+t        new_tab
map cmd+shift+q        close_tab

# Miscellaneous
map cmd+shift+equal    increase_font_size
map cmd+shift+minus    decrease_font_size
map cmd+shift+backspace restore_font_size

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# send_text all ctrl+alt+a Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# send_text normal ctrl+alt+a Word\x1b[H
# send_text application ctrl+alt+a Word\x1bOH

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols


# OS specific tweaks

# Hide the kitty window's title bar on macOS.
#macos_hide_titlebar no
#hide_window_decorations yes
